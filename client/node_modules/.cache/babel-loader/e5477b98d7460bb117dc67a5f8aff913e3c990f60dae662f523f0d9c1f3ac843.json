{"ast":null,"code":"var _jsxFileName = \"/Users/varvarakorableva/Desktop/aist/client/src/components/Slider/Slider.js\",\n  _s = $RefreshSig$();\nimport './Slider.css';\nimport React, { useEffect, useState, createContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getImages } from \"../../../imagesApi\";\n\n/*import Arrows from \"./components/Controls/Arrows\";\n        <Arrows />*/\nimport Dots from \"./components/Controls/Dots\";\nimport SlidesList from \"./components/SlidesList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SliderContext = /*#__PURE__*/createContext();\nconst Slider = function (_ref) {\n  _s();\n  let {\n    width,\n    height,\n    autoPlay,\n    autoPlayTime\n  } = _ref;\n  const [items, setItems] = useState([]);\n  const [slide, setSlide] = useState(0);\n  const [touchPosition, setTouchPosition] = useState(null);\n  useEffect(() => {\n    const loadData = async () => {\n      const images = await getImages();\n      setItems(images);\n    };\n    loadData();\n  }, []);\n  const changeSlide = function () {\n    let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let slideNumber = 0;\n    if (slide + direction < 0) {\n      slideNumber = items.length - 1;\n    } else {\n      slideNumber = (slide + direction) % items.length;\n    }\n    setSlide(slideNumber);\n  };\n  const goToSlide = number => {\n    setSlide(number % items.length);\n  };\n  const handleTouchStart = e => {\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n  const handleTouchMove = e => {\n    if (touchPosition === null) {\n      return;\n    }\n    const currentPosition = e.touches[0].clientX;\n    const direction = touchPosition - currentPosition;\n    if (direction > 10) {\n      changeSlide(1);\n    }\n    if (direction < -10) {\n      changeSlide(-1);\n    }\n    setTouchPosition(null);\n  };\n  useEffect(() => {\n    if (!autoPlay) return;\n    const interval = setInterval(() => {\n      changeSlide(1);\n    }, autoPlayTime);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [items.length, slide]); // when images uploaded or slide changed manually we start timer\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width,\n      height\n    },\n    className: \"slider\",\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    children: /*#__PURE__*/_jsxDEV(SliderContext.Provider, {\n      value: {\n        goToSlide,\n        changeSlide,\n        slidesCount: items.length,\n        slideNumber: slide,\n        items\n      },\n      children: [/*#__PURE__*/_jsxDEV(SlidesList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Slider, \"PJnZRK1wp1dtBpiXss4Yk7BfNFs=\");\n_c = Slider;\nSlider.propTypes = {\n  autoPlay: PropTypes.bool,\n  autoPlayTime: PropTypes.number,\n  width: PropTypes.string,\n  height: PropTypes.string\n};\nSlider.defaultProps = {\n  autoPlay: false,\n  autoPlayTime: 5000,\n  width: \"100%\",\n  height: \"100%\"\n};\nexport default Slider;\nvar _c;\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"names":["React","useEffect","useState","createContext","PropTypes","getImages","Dots","SlidesList","jsxDEV","_jsxDEV","SliderContext","Slider","_ref","_s","width","height","autoPlay","autoPlayTime","items","setItems","slide","setSlide","touchPosition","setTouchPosition","loadData","images","changeSlide","direction","arguments","length","undefined","slideNumber","goToSlide","number","handleTouchStart","e","touchDown","touches","clientX","handleTouchMove","currentPosition","interval","setInterval","clearInterval","style","className","onTouchStart","onTouchMove","children","Provider","value","slidesCount","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","string","defaultProps","$RefreshReg$"],"sources":["/Users/varvarakorableva/Desktop/aist/client/src/components/Slider/Slider.js"],"sourcesContent":["import './Slider.css'\n\nimport React, { useEffect, useState, createContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getImages } from \"../../../imagesApi\";\n\n/*import Arrows from \"./components/Controls/Arrows\";\n        <Arrows />*/\nimport Dots from \"./components/Controls/Dots\";\n\nimport SlidesList from \"./components/SlidesList\";\n\nexport const SliderContext = createContext();\n\nconst Slider = function ({ width, height, autoPlay, autoPlayTime }) {\n  const [items, setItems] = useState([]);\n  const [slide, setSlide] = useState(0);\n  const [touchPosition, setTouchPosition] = useState(null)\n\n  useEffect(() => {\n    const loadData = async () => {\n      const images = await getImages();\n      setItems(images);\n    };\n    loadData();\n  }, []);\n\n  const changeSlide = (direction = 1) => {\n    let slideNumber = 0;\n\n    if (slide + direction < 0) {\n      slideNumber = items.length - 1;\n    } else {\n      slideNumber = (slide + direction) % items.length;\n    }\n\n    setSlide(slideNumber);\n  };\n\n  const goToSlide = (number) => {\n    setSlide(number % items.length);\n  };\n\n  const handleTouchStart = (e) => {\n    const touchDown = e.touches[0].clientX;\n\n    setTouchPosition(touchDown);\n  }\n\n  const handleTouchMove = (e) => {\n    if (touchPosition === null) {\n      return;\n    }\n\n    const currentPosition = e.touches[0].clientX;\n    const direction = touchPosition - currentPosition;\n\n    if (direction > 10) {\n      changeSlide(1);\n    }\n\n    if (direction < -10) {\n      changeSlide(-1);\n    }\n\n    setTouchPosition(null);\n  }\n\n  useEffect(() => {\n    if (!autoPlay) return;\n\n    const interval = setInterval(() => {\n      changeSlide(1);\n    }, autoPlayTime);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [items.length, slide]); // when images uploaded or slide changed manually we start timer\n\n  return (\n    <div\n      style={{ width, height }}\n      className=\"slider\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n    >\n      <SliderContext.Provider\n        value={{\n          goToSlide,\n          changeSlide,\n          slidesCount: items.length,\n          slideNumber: slide,\n          items,\n        }}\n      >\n        <SlidesList />\n        <Dots />\n      </SliderContext.Provider>\n    </div>\n  );\n};\n\nSlider.propTypes = {\n  autoPlay: PropTypes.bool,\n  autoPlayTime: PropTypes.number,\n  width: PropTypes.string,\n  height: PropTypes.string\n};\n\nSlider.defaultProps = {\n  autoPlay: false,\n  autoPlayTime: 5000,\n  width: \"100%\",\n  height: \"100%\"\n};\n\nexport default Slider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}